---
- name: Include disk setup tasks
  include_tasks: disk_setup.yml

- name: Include LVM creation tasks
  include_tasks: lvm_setup.yml

- name: Include directory creation tasks
  include_tasks: directory_setup.yml

- name: Include mounting tasks
  include_tasks: mount_setup.yml

- name: Include RPM download tasks
  include_tasks: rpm_download.yml

- name: Include MySQL installation tasks
  include_tasks: mysql_install.yml

- name: Include MySQL configuration tasks
  include_tasks: mysql_config.yml

- name: Update Service configuration
  include_tasks: service_config.yml

- name: Install MySQL server
  ansible.builtin.package:
    name: "{{ 'mysql-server' if ansible_os_family == 'Debian' else 'mysql-community-server' }}"
    state: present

- name: Ensure MySQL service is enabled and started
  ansible.builtin.service:
    name: mysql
    enabled: true
    state: started

- name: Set root password (local, insecure default for dev)
  ansible.builtin.command: |
    mysql -uroot -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_root_password }}'; FLUSH PRIVILEGES;"
  args:
    creates: /root/.mysql_root_password_set
  register: set_root_pwd
  changed_when: set_root_pwd.rc == 0
  failed_when: false

- name: Mark root password as set
  ansible.builtin.file:
    path: /root/.mysql_root_password_set
    state: touch
  when: set_root_pwd is changed

- name: Bind address in my.cnf
  ansible.builtin.lineinfile:
    path: /etc/mysql/mysql.conf.d/mysqld.cnf
    regexp: '^bind-address'
    line: "bind-address = {{ mysql_bind_address }}"
    backup: yes
  notify: restart mysql
  when: ansible_os_family == 'Debian'

- name: Open port and set bind on RHEL path
  ansible.builtin.lineinfile:
    path: /etc/my.cnf
    regexp: '^bind-address|^port'
    line: |
      bind-address = {{ mysql_bind_address }}
      port = {{ mysql_port }}
    create: yes
    backup: yes
  notify: restart mysql
  when: ansible_os_family == 'RedHat'

- name: Create databases
  community.mysql.mysql_db:
    name: "{{ item.name | default(item) }}"
    state: present
    encoding: utf8mb4
    collation: utf8mb4_unicode_ci
    login_user: root
    login_password: "{{ mysql_root_password }}"
  loop: "{{ mysql_databases }}"
  when: mysql_databases | length > 0

- name: Create users
  community.mysql.mysql_user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    host: "{{ item.host | default('%') }}"
    priv: "{{ item.priv | default('*.*:USAGE') }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"
  loop: "{{ mysql_users }}"
  when: mysql_users | length > 0


