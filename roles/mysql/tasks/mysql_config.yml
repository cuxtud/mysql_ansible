---
- name: Set ownership of MySQL data directory
  file:
    path: /u101/mysql/data
    owner: mysql
    group: mysql
    recurse: true

- name: Set ownership of MySQL archive directory
  file:
    path: /u102/mysql/archive
    owner: mysql
    group: mysql
    recurse: true

- name: Set ownership of MySQL backup directory
  file:
    path: /u103/mysql/backup
    owner: mysql
    group: mysql
    recurse: true

- name: Set ownership of MySQL log directory
  file:
    path: /u101/mysql/data/log
    owner: mysql
    group: mysql
    recurse: true

- name: Set ownership of archive log bin directory
  file:
    path: /u102/mysql/archive/logbin
    owner: mysql
    group: mysql
    recurse: true

- name: Copy MySQL configuration file
  copy:
    src: my.cnf
    dest: /etc/my.cnf
    owner: root
    group: root
    mode: '0644'

- name: Start MySQL service
  ansible.builtin.service:
    name: mysqld
    state: started
    enabled: true

- name: Check if new password already works
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ mysql_new_password }}"
    query: "SELECT 1"
  register: mysql_new_pwd_test
  failed_when: false
  #no_log: true
  changed_when: false

- name: Extract temporary password from MySQL log
  shell: grep 'temporary password' /u101/mysql/data/log/mysqld.log | awk '{print $NF}' | tr -d '\n\r'
  register: mysql_temp_password
  changed_when: false
  when: "'Access denied' in mysql_new_pwd_test.msg"

- name: Reset MySQL root password with temporary password
  shell: |
    mysql -u root -p'{{ mysql_temp_password.stdout }}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '{{ mysql_new_password }}'; FLUSH PRIVILEGES;"
  when:
    - "'Access denied' in mysql_new_pwd_test.msg"
    - mysql_temp_password.stdout is defined and mysql_temp_password.stdout | length > 0
  no_log: true
  #notify: "Confirm password reset"

- name: Install Python3-PyMSQL 
  ansible.builtin.package:
    name: python3-PyMySQL
    state: present

- name: Flush privileges
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ mysql_new_password }}"
    query: "FLUSH PRIVILEGES;"
  when: "'Access denied' in mysql_new_pwd_test.msg"

- name: Confirm password reset success
  debug:
    msg: "MySQL root password successfully reset"
  when: "'Access denied' in mysql_new_pwd_test.msg"